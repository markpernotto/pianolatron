import './TabbedPanel.svelte.css.proxy.js';
/* src/components/TabbedPanel.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import PanelSwitcher from "./PanelSwitcher.svelte.js";
import PlaybackControls from "./PlaybackControls.svelte.js";
import BasicSettings from "./BasicSettings.svelte.js";
import AdvancedSettings from "./AdvancedSettings.svelte.js";

function create_if_block(ctx) {
	let advancedsettings;
	let current;
	advancedsettings = new AdvancedSettings({});

	return {
		c() {
			create_component(advancedsettings.$$.fragment);
		},
		m(target, anchor) {
			mount_component(advancedsettings, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(advancedsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(advancedsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(advancedsettings, detaching);
		}
	};
}

function create_fragment(ctx) {
	let panelswitcher;
	let updating_selectedPanel;
	let t0;
	let div;
	let basicsettings;
	let t1;
	let t2;
	let playbackcontrols;
	let current;

	function panelswitcher_selectedPanel_binding(value) {
		/*panelswitcher_selectedPanel_binding*/ ctx[4](value);
	}

	let panelswitcher_props = {};

	if (/*selectedPanel*/ ctx[3] !== void 0) {
		panelswitcher_props.selectedPanel = /*selectedPanel*/ ctx[3];
	}

	panelswitcher = new PanelSwitcher({ props: panelswitcher_props });
	binding_callbacks.push(() => bind(panelswitcher, "selectedPanel", panelswitcher_selectedPanel_binding));

	basicsettings = new BasicSettings({
			props: {
				skipToPercentage: /*skipToPercentage*/ ctx[1]
			}
		});

	let if_block = /*selectedPanel*/ ctx[3] === "settings" && create_if_block(ctx);

	playbackcontrols = new PlaybackControls({
			props: {
				playPauseApp: /*playPauseApp*/ ctx[0],
				stopApp: /*stopApp*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(panelswitcher.$$.fragment);
			t0 = space();
			div = element("div");
			create_component(basicsettings.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			create_component(playbackcontrols.$$.fragment);
			attr(div, "class", "svelte-1hzo31a");
		},
		m(target, anchor) {
			mount_component(panelswitcher, target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			mount_component(basicsettings, div, null);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			insert(target, t2, anchor);
			mount_component(playbackcontrols, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const panelswitcher_changes = {};

			if (!updating_selectedPanel && dirty & /*selectedPanel*/ 8) {
				updating_selectedPanel = true;
				panelswitcher_changes.selectedPanel = /*selectedPanel*/ ctx[3];
				add_flush_callback(() => updating_selectedPanel = false);
			}

			panelswitcher.$set(panelswitcher_changes);
			const basicsettings_changes = {};
			if (dirty & /*skipToPercentage*/ 2) basicsettings_changes.skipToPercentage = /*skipToPercentage*/ ctx[1];
			basicsettings.$set(basicsettings_changes);

			if (/*selectedPanel*/ ctx[3] === "settings") {
				if (if_block) {
					if (dirty & /*selectedPanel*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const playbackcontrols_changes = {};
			if (dirty & /*playPauseApp*/ 1) playbackcontrols_changes.playPauseApp = /*playPauseApp*/ ctx[0];
			if (dirty & /*stopApp*/ 4) playbackcontrols_changes.stopApp = /*stopApp*/ ctx[2];
			playbackcontrols.$set(playbackcontrols_changes);
		},
		i(local) {
			if (current) return;
			transition_in(panelswitcher.$$.fragment, local);
			transition_in(basicsettings.$$.fragment, local);
			transition_in(if_block);
			transition_in(playbackcontrols.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(panelswitcher.$$.fragment, local);
			transition_out(basicsettings.$$.fragment, local);
			transition_out(if_block);
			transition_out(playbackcontrols.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(panelswitcher, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			destroy_component(basicsettings);
			if (if_block) if_block.d();
			if (detaching) detach(t2);
			destroy_component(playbackcontrols, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { playPauseApp } = $$props;
	let { skipToPercentage } = $$props;
	let { stopApp } = $$props;
	let selectedPanel = "controls";

	function panelswitcher_selectedPanel_binding(value) {
		selectedPanel = value;
		$$invalidate(3, selectedPanel);
	}

	$$self.$$set = $$props => {
		if ("playPauseApp" in $$props) $$invalidate(0, playPauseApp = $$props.playPauseApp);
		if ("skipToPercentage" in $$props) $$invalidate(1, skipToPercentage = $$props.skipToPercentage);
		if ("stopApp" in $$props) $$invalidate(2, stopApp = $$props.stopApp);
	};

	return [
		playPauseApp,
		skipToPercentage,
		stopApp,
		selectedPanel,
		panelswitcher_selectedPanel_binding
	];
}

class TabbedPanel extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			playPauseApp: 0,
			skipToPercentage: 1,
			stopApp: 2
		});
	}
}

export default TabbedPanel;