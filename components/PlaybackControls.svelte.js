import './PlaybackControls.svelte.css.proxy.js';
/* src/components/PlaybackControls.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_style,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

import { pedalling } from "../stores.js";

function create_fragment(ctx) {
	let div;
	let button0;
	let t1;
	let button1;
	let t3;
	let button2;
	let t4;
	let kbd0;
	let button2_aria_pressed_value;
	let t6;
	let button3;
	let t7;
	let kbd1;
	let button3_aria_pressed_value;
	let t9;
	let br;
	let t10;
	let button4;
	let t11;
	let kbd2;
	let button4_aria_pressed_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button0 = element("button");
			button0.textContent = "Play/Pause";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Stop";
			t3 = space();
			button2 = element("button");
			t4 = text("Soft\n    ");
			kbd0 = element("kbd");
			kbd0.textContent = "q";
			t6 = space();
			button3 = element("button");
			t7 = text("Sustain\n    ");
			kbd1 = element("kbd");
			kbd1.textContent = "c";
			t9 = space();
			br = element("br");
			t10 = space();
			button4 = element("button");
			t11 = text("Accent\n    ");
			kbd2 = element("kbd");
			kbd2.textContent = ",";
			attr(button0, "type", "button");
			attr(button0, "class", "svelte-maddbr");
			attr(button1, "type", "button");
			attr(button1, "class", "svelte-maddbr");
			attr(button2, "type", "button");
			attr(button2, "aria-pressed", button2_aria_pressed_value = /*$pedalling*/ ctx[2].soft);
			attr(button2, "class", "svelte-maddbr");
			toggle_class(button2, "pedal-on", /*$pedalling*/ ctx[2].soft);
			attr(button3, "type", "button");
			attr(button3, "aria-pressed", button3_aria_pressed_value = /*$pedalling*/ ctx[2].sustain);
			attr(button3, "class", "svelte-maddbr");
			toggle_class(button3, "pedal-on", /*$pedalling*/ ctx[2].sustain);
			attr(button4, "type", "button");
			set_style(button4, "width", "100%");
			attr(button4, "aria-pressed", button4_aria_pressed_value = /*$pedalling*/ ctx[2].accent);
			attr(button4, "class", "svelte-maddbr");
			toggle_class(button4, "pedal-on", /*$pedalling*/ ctx[2].accent);
			attr(div, "id", "playback-controls");
			attr(div, "class", "svelte-maddbr");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button0);
			append(div, t1);
			append(div, button1);
			append(div, t3);
			append(div, button2);
			append(button2, t4);
			append(button2, kbd0);
			append(div, t6);
			append(div, button3);
			append(button3, t7);
			append(button3, kbd1);
			append(div, t9);
			append(div, br);
			append(div, t10);
			append(div, button4);
			append(button4, t11);
			append(button4, kbd2);

			if (!mounted) {
				dispose = [
					listen(window, "mouseup", /*mouseup_handler*/ ctx[3]),
					listen(button0, "click", function () {
						if (is_function(/*playPauseApp*/ ctx[0])) /*playPauseApp*/ ctx[0].apply(this, arguments);
					}),
					listen(button1, "click", function () {
						if (is_function(/*stopApp*/ ctx[1])) /*stopApp*/ ctx[1].apply(this, arguments);
					}),
					listen(button2, "click", /*click_handler*/ ctx[4]),
					listen(button3, "click", /*click_handler_1*/ ctx[5]),
					listen(button4, "mousedown", /*mousedown_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*$pedalling*/ 4 && button2_aria_pressed_value !== (button2_aria_pressed_value = /*$pedalling*/ ctx[2].soft)) {
				attr(button2, "aria-pressed", button2_aria_pressed_value);
			}

			if (dirty & /*$pedalling*/ 4) {
				toggle_class(button2, "pedal-on", /*$pedalling*/ ctx[2].soft);
			}

			if (dirty & /*$pedalling*/ 4 && button3_aria_pressed_value !== (button3_aria_pressed_value = /*$pedalling*/ ctx[2].sustain)) {
				attr(button3, "aria-pressed", button3_aria_pressed_value);
			}

			if (dirty & /*$pedalling*/ 4) {
				toggle_class(button3, "pedal-on", /*$pedalling*/ ctx[2].sustain);
			}

			if (dirty & /*$pedalling*/ 4 && button4_aria_pressed_value !== (button4_aria_pressed_value = /*$pedalling*/ ctx[2].accent)) {
				attr(button4, "aria-pressed", button4_aria_pressed_value);
			}

			if (dirty & /*$pedalling*/ 4) {
				toggle_class(button4, "pedal-on", /*$pedalling*/ ctx[2].accent);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $pedalling;
	component_subscribe($$self, pedalling, $$value => $$invalidate(2, $pedalling = $$value));
	let { playPauseApp } = $$props;
	let { stopApp } = $$props;
	const mouseup_handler = () => pedalling.update(val => ({ ...val, accent: false }));
	const click_handler = () => pedalling.update(val => ({ ...val, soft: !val.soft }));
	const click_handler_1 = () => pedalling.update(val => ({ ...val, sustain: !val.sustain }));
	const mousedown_handler = () => pedalling.update(val => ({ ...val, accent: true }));

	$$self.$$set = $$props => {
		if ("playPauseApp" in $$props) $$invalidate(0, playPauseApp = $$props.playPauseApp);
		if ("stopApp" in $$props) $$invalidate(1, stopApp = $$props.stopApp);
	};

	return [
		playPauseApp,
		stopApp,
		$pedalling,
		mouseup_handler,
		click_handler,
		click_handler_1,
		mousedown_handler
	];
}

class PlaybackControls extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { playPauseApp: 0, stopApp: 1 });
	}
}

export default PlaybackControls;