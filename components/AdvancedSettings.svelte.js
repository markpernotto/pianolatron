import './AdvancedSettings.svelte.css.proxy.js';
/* src/components/AdvancedSettings.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	component_subscribe,
	create_bidirectional_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	null_to_empty,
	run_all,
	safe_not_equal,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

import { fly } from "../_snowpack/pkg/svelte/transition.js";

import {
	rollHasExpressions,
	playExpressionsOnOff,
	rollPedalingOnOff,
	useMidiTempoEventsOnOff,
	userSettings
} from "../stores.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (106:4) {#each themes as theme}
function create_each_block(ctx) {
	let button;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[11](/*theme*/ ctx[13], ...args);
	}

	return {
		c() {
			button = element("button");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*theme*/ ctx[13]) + " svelte-oulsvg"));
			toggle_class(button, "active", /*$userSettings*/ ctx[1].theme === /*theme*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userSettings, themes*/ 66) {
				toggle_class(button, "active", /*$userSettings*/ ctx[1].theme === /*theme*/ ctx[13]);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let fieldset0;
	let legend0;
	let t1;
	let div0;
	let t2;
	let input0;
	let t3;
	let fieldset1;
	let legend1;
	let t5;
	let div1;
	let t6;
	let input1;
	let input1_disabled_value;
	let t7;
	let div2;
	let t8;
	let input2;
	let input2_disabled_value;
	let t9;
	let div3;
	let t10;
	let input3;
	let t11;
	let div4;
	let t12;
	let div5_transition;
	let current;
	let mounted;
	let dispose;
	let each_value = /*themes*/ ctx[6];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div5 = element("div");
			fieldset0 = element("fieldset");
			legend0 = element("legend");
			legend0.textContent = "Visualization Settings";
			t1 = space();
			div0 = element("div");
			t2 = text("Show details for Active Notes:\n      ");
			input0 = element("input");
			t3 = space();
			fieldset1 = element("fieldset");
			legend1 = element("legend");
			legend1.textContent = "Roll Emulation Settings";
			t5 = space();
			div1 = element("div");
			t6 = text("Play Expressions:\n      ");
			input1 = element("input");
			t7 = space();
			div2 = element("div");
			t8 = text("Use Roll Pedaling:\n      ");
			input2 = element("input");
			t9 = space();
			div3 = element("div");
			t10 = text("Emulate Roll Acceleration:\n      ");
			input3 = element("input");
			t11 = space();
			div4 = element("div");
			t12 = text("Theme:\n    ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(legend0, "class", "svelte-oulsvg");
			attr(input0, "type", "checkbox");
			attr(div0, "class", "svelte-oulsvg");
			attr(fieldset0, "class", "svelte-oulsvg");
			attr(legend1, "class", "svelte-oulsvg");
			attr(input1, "type", "checkbox");
			input1.disabled = input1_disabled_value = !/*$rollHasExpressions*/ ctx[2];
			attr(div1, "class", "svelte-oulsvg");
			attr(input2, "type", "checkbox");
			input2.disabled = input2_disabled_value = !/*$rollHasExpressions*/ ctx[2];
			attr(div2, "class", "svelte-oulsvg");
			attr(input3, "type", "checkbox");
			attr(div3, "class", "svelte-oulsvg");
			attr(fieldset1, "class", "svelte-oulsvg");
			attr(div5, "id", "settings-panel");
			attr(div5, "class", "svelte-oulsvg");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, fieldset0);
			append(fieldset0, legend0);
			append(fieldset0, t1);
			append(fieldset0, div0);
			append(div0, t2);
			append(div0, input0);
			input0.checked = /*$userSettings*/ ctx[1].activeNoteDetails;
			append(div5, t3);
			append(div5, fieldset1);
			append(fieldset1, legend1);
			append(fieldset1, t5);
			append(fieldset1, div1);
			append(div1, t6);
			append(div1, input1);
			input1.checked = /*$playExpressionsOnOff*/ ctx[3];
			append(fieldset1, t7);
			append(fieldset1, div2);
			append(div2, t8);
			append(div2, input2);
			input2.checked = /*$rollPedalingOnOff*/ ctx[4];
			append(fieldset1, t9);
			append(fieldset1, div3);
			append(div3, t10);
			append(div3, input3);
			input3.checked = /*$useMidiTempoEventsOnOff*/ ctx[5];
			append(div5, t11);
			append(div5, div4);
			append(div4, t12);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}

			/*div5_binding*/ ctx[12](div5);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "change", /*input0_change_handler*/ ctx[7]),
					listen(input1, "change", /*input1_change_handler*/ ctx[8]),
					listen(input2, "change", /*input2_change_handler*/ ctx[9]),
					listen(input3, "change", /*input3_change_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*$userSettings*/ 2) {
				input0.checked = /*$userSettings*/ ctx[1].activeNoteDetails;
			}

			if (!current || dirty & /*$rollHasExpressions*/ 4 && input1_disabled_value !== (input1_disabled_value = !/*$rollHasExpressions*/ ctx[2])) {
				input1.disabled = input1_disabled_value;
			}

			if (dirty & /*$playExpressionsOnOff*/ 8) {
				input1.checked = /*$playExpressionsOnOff*/ ctx[3];
			}

			if (!current || dirty & /*$rollHasExpressions*/ 4 && input2_disabled_value !== (input2_disabled_value = !/*$rollHasExpressions*/ ctx[2])) {
				input2.disabled = input2_disabled_value;
			}

			if (dirty & /*$rollPedalingOnOff*/ 16) {
				input2.checked = /*$rollPedalingOnOff*/ ctx[4];
			}

			if (dirty & /*$useMidiTempoEventsOnOff*/ 32) {
				input3.checked = /*$useMidiTempoEventsOnOff*/ ctx[5];
			}

			if (dirty & /*themes, $userSettings, userSettings*/ 66) {
				each_value = /*themes*/ ctx[6];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			if (local) {
				add_render_callback(() => {
					if (!div5_transition) div5_transition = create_bidirectional_transition(
						div5,
						fly,
						{
							delay: 0,
							duration: 300,
							x: parseInt(window.getComputedStyle(/*el*/ ctx[0]).width, 10),
							y: 0,
							opacity: 1
						},
						true
					);

					div5_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			if (local) {
				if (!div5_transition) div5_transition = create_bidirectional_transition(
					div5,
					fly,
					{
						delay: 0,
						duration: 300,
						x: parseInt(window.getComputedStyle(/*el*/ ctx[0]).width, 10),
						y: 0,
						opacity: 1
					},
					false
				);

				div5_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_each(each_blocks, detaching);
			/*div5_binding*/ ctx[12](null);
			if (detaching && div5_transition) div5_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $userSettings;
	let $rollHasExpressions;
	let $playExpressionsOnOff;
	let $rollPedalingOnOff;
	let $useMidiTempoEventsOnOff;
	component_subscribe($$self, userSettings, $$value => $$invalidate(1, $userSettings = $$value));
	component_subscribe($$self, rollHasExpressions, $$value => $$invalidate(2, $rollHasExpressions = $$value));
	component_subscribe($$self, playExpressionsOnOff, $$value => $$invalidate(3, $playExpressionsOnOff = $$value));
	component_subscribe($$self, rollPedalingOnOff, $$value => $$invalidate(4, $rollPedalingOnOff = $$value));
	component_subscribe($$self, useMidiTempoEventsOnOff, $$value => $$invalidate(5, $useMidiTempoEventsOnOff = $$value));
	let el;
	const themes = ["cardinal", "blue", "green", "grey"];

	function input0_change_handler() {
		$userSettings.activeNoteDetails = this.checked;
		userSettings.set($userSettings);
	}

	function input1_change_handler() {
		$playExpressionsOnOff = this.checked;
		playExpressionsOnOff.set($playExpressionsOnOff);
	}

	function input2_change_handler() {
		$rollPedalingOnOff = this.checked;
		rollPedalingOnOff.set($rollPedalingOnOff);
	}

	function input3_change_handler() {
		$useMidiTempoEventsOnOff = this.checked;
		useMidiTempoEventsOnOff.set($useMidiTempoEventsOnOff);
	}

	const click_handler = theme => userSettings.update(settings => ({ ...settings, theme }));

	function div5_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$userSettings*/ 2) {
			$: document.body.className = $userSettings.theme;
		}
	};

	return [
		el,
		$userSettings,
		$rollHasExpressions,
		$playExpressionsOnOff,
		$rollPedalingOnOff,
		$useMidiTempoEventsOnOff,
		themes,
		input0_change_handler,
		input1_change_handler,
		input2_change_handler,
		input3_change_handler,
		click_handler,
		div5_binding
	];
}

class AdvancedSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default AdvancedSettings;