import './KeyboardControls.svelte.css.proxy.js';
/* src/components/KeyboardControls.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	component_subscribe,
	create_bidirectional_transition,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_store_value,
	svg_element
} from "../_snowpack/pkg/svelte/internal.js";

import { fade } from "../_snowpack/pkg/svelte/transition.js";
import { overlayKeyboard } from "../stores.js";

function create_else_block(ctx) {
	let svg;
	let path0;
	let rect;
	let line;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			rect = svg_element("rect");
			line = svg_element("line");
			path1 = svg_element("path");
			attr(path0, "d", "M11 19h-6a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v4");
			attr(rect, "x", "14");
			attr(rect, "y", "14");
			attr(rect, "width", "7");
			attr(rect, "height", "5");
			attr(rect, "rx", "1");
			attr(line, "x1", "7");
			attr(line, "y1", "9");
			attr(line, "x2", "11");
			attr(line, "y2", "13");
			attr(path1, "d", "M7 12v-3h3");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke", "currentColor");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, rect);
			append(svg, line);
			append(svg, path1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (25:4) {#if $overlayKeyboard}
function create_if_block(ctx) {
	let svg;
	let path0;
	let rect;
	let line;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			rect = svg_element("rect");
			line = svg_element("line");
			path1 = svg_element("path");
			attr(path0, "d", "M11 19h-6a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v4");
			attr(rect, "x", "14");
			attr(rect, "y", "14");
			attr(rect, "width", "7");
			attr(rect, "height", "5");
			attr(rect, "rx", "1");
			attr(line, "x1", "7");
			attr(line, "y1", "9");
			attr(line, "x2", "11");
			attr(line, "y2", "13");
			attr(path1, "d", "M8 13h3v-3");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke", "currentColor");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, rect);
			append(svg, line);
			append(svg, path1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let button;
	let div_transition;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*$overlayKeyboard*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			button = element("button");
			if_block.c();
			attr(button, "class", "svelte-yluqog");
			attr(div, "class", "overlay-buttons svelte-yluqog");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			if_block.m(button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, null);
				}
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $overlayKeyboard;
	component_subscribe($$self, overlayKeyboard, $$value => $$invalidate(0, $overlayKeyboard = $$value));
	const click_handler = () => set_store_value(overlayKeyboard, $overlayKeyboard = !$overlayKeyboard, $overlayKeyboard);
	return [$overlayKeyboard, click_handler];
}

class KeyboardControls extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default KeyboardControls;