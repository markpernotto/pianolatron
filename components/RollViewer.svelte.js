import './RollViewer.svelte.css.proxy.js';
/* src/components/RollViewer.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import OpenSeadragon from "../_snowpack/pkg/openseadragon.js";
import { rollMetadata, currentTick } from "../stores.js";

function create_fragment(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "id", "roll-viewer");
			attr(div, "class", "svelte-u57qnd");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

const WELTE_MIDI_START = 10;
const WELTE_RED_FIRST_NOTE = 24;
const WELTE_RED_LAST_NOTE = 103;

function instance($$self, $$props, $$invalidate) {
	let $rollMetadata;
	let $currentTick;
	component_subscribe($$self, rollMetadata, $$value => $$invalidate(7, $rollMetadata = $$value));
	component_subscribe($$self, currentTick, $$value => $$invalidate(9, $currentTick = $$value));
	let { imageUrl } = $$props;
	let { holesByTickInterval } = $$props;
	let openSeadragon;
	let firstHolePx;
	let dragging;
	let marks = [];
	let hoveredMark;

	const getNoteName = trackerHole => {
		const midiNumber = trackerHole + WELTE_MIDI_START;

		if (midiNumber >= WELTE_RED_FIRST_NOTE && midiNumber <= WELTE_RED_LAST_NOTE) {
			const octave = parseInt(midiNumber / 12, 10) - 1;
			const name = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"][(midiNumber - 21) % 12];
			return `${name}${octave}`;
		}

		return null;
	};

	const createMark = hole => {
		const { WIDTH_COL, ORIGIN_COL, ORIGIN_ROW, OFF_TIME, TRACKER_HOLE } = hole;
		const mark = document.createElement("mark");
		const noteName = getNoteName(TRACKER_HOLE);
		if (noteName) mark.dataset.info = noteName;

		mark.addEventListener("mouseout", () => {
			if (!marks.map(([_hole]) => _hole).includes(hole)) openSeadragon.viewport.viewer.removeOverlay(hoveredMark);
		});

		const viewportRectangle = openSeadragon.viewport.imageToViewportRectangle(ORIGIN_COL, ORIGIN_ROW, WIDTH_COL, OFF_TIME - ORIGIN_ROW);
		openSeadragon.viewport.viewer.addOverlay(mark, viewportRectangle);
		return mark;
	};

	const createHolesOverlaySvg = () => {
		const { IMAGE_WIDTH, IMAGE_LENGTH, holeData } = $rollMetadata;
		if (!holeData) return;
		const imageWidth = parseInt(IMAGE_WIDTH, 10);
		const imageLength = parseInt(IMAGE_LENGTH, 10);
		const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
		const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
		const entireViewportRectangle = openSeadragon.viewport.imageToViewportRectangle(0, 0, imageWidth, imageLength);
		svg.setAttribute("width", imageWidth);
		svg.setAttribute("height", imageLength);
		svg.setAttribute("viewBox", `0 0 ${imageWidth} ${imageLength}`);
		svg.appendChild(g);

		holeData.forEach(hole => {
			const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
			const { ORIGIN_COL, ORIGIN_ROW, WIDTH_COL, OFF_TIME } = hole;
			rect.setAttribute("x", ORIGIN_COL);
			rect.setAttribute("y", ORIGIN_ROW);
			rect.setAttribute("width", WIDTH_COL);
			rect.setAttribute("height", OFF_TIME - ORIGIN_ROW);

			rect.addEventListener("mouseover", () => {
				if (marks.map(([_hole]) => _hole).includes(hole)) return;
				openSeadragon.viewport.viewer.removeOverlay(hoveredMark);
				hoveredMark = createMark(hole);
			});

			g.appendChild(rect);
		});

		openSeadragon.viewport.viewer.addOverlay(svg, entireViewportRectangle);
	};

	const panViewportToTick = tick => {
		if (!openSeadragon) return;
		const { viewport } = openSeadragon;

		// if we're dragging we want the target bounds, if otherwise (and most
		//   especially if we happen to be zooming) we want the current bounds
		const viewportBounds = viewport.getBounds(!dragging);

		const linePx = firstHolePx + (scrollDownwards ? tick : -tick);
		const lineViewport = viewport.imageToViewportCoordinates(0, linePx);
		const lineCenter = new OpenSeadragon.Point(viewportBounds.x + viewportBounds.width / 2, lineViewport.y);
		viewport.panTo(lineCenter);
	};

	const highlightHoles = tick => {
		if (!openSeadragon) return;
		const holes = holesByTickInterval.search(tick, tick);

		marks = marks.filter(([hole, elem]) => {
			if (holes.includes(hole)) return true;
			openSeadragon.viewport.viewer.removeOverlay(elem);
			return false;
		});

		holes.forEach(hole => {
			if (marks.map(([_hole]) => _hole).includes(hole)) return;
			const mark = createMark(hole);
			mark.classList.add("active");
			marks.push([hole, mark]);
		});
	};

	onMount(async () => {
		openSeadragon = OpenSeadragon({
			id: "roll-viewer",
			showNavigationControl: false,
			panHorizontal: true,
			visibilityRatio: 1,
			defaultZoomLevel: 1,
			minZoomLevel: 0.01,
			maxZoomLevel: 4,
			constrainDuringPan: true
		});

		openSeadragon.addOnceHandler("update-viewport", () => {
			createHolesOverlaySvg();
			panViewportToTick(0);
		});

		openSeadragon.addHandler("canvas-drag", () => dragging = true);
		openSeadragon.addHandler("canvas-drag-end", () => dragging = false);
		openSeadragon.open(imageUrl);
	});

	$$self.$$set = $$props => {
		if ("imageUrl" in $$props) $$invalidate(0, imageUrl = $$props.imageUrl);
		if ("holesByTickInterval" in $$props) $$invalidate(1, holesByTickInterval = $$props.holesByTickInterval);
	};

	let scrollDownwards;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$currentTick*/ 512) {
			$: panViewportToTick($currentTick);
		}

		if ($$self.$$.dirty & /*$currentTick*/ 512) {
			$: highlightHoles($currentTick);
		}

		if ($$self.$$.dirty & /*$rollMetadata*/ 128) {
			$: $$invalidate(8, scrollDownwards = $rollMetadata.ROLL_TYPE === "welte-red");
		}

		if ($$self.$$.dirty & /*scrollDownwards, $rollMetadata*/ 384) {
			$: firstHolePx = scrollDownwards
			? parseInt($rollMetadata.FIRST_HOLE, 10)
			: parseInt($rollMetadata.IMAGE_LENGTH, 10) - parseInt($rollMetadata.FIRST_HOLE, 10);
		}
	};

	return [imageUrl, holesByTickInterval];
}

class RollViewer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { imageUrl: 0, holesByTickInterval: 1 });
	}
}

export default RollViewer;