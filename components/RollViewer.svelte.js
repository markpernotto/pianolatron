import './RollViewer.svelte.css.proxy.js';
/* src/components/RollViewer.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_flush_callback,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import OpenSeadragon from "../_snowpack/pkg/openseadragon.js";
import { rollMetadata, currentTick } from "../stores.js";
import RollViewerControls from "./RollViewerControls.svelte.js";

function create_if_block(ctx) {
	let rollviewercontrols;
	let updating_strafing;
	let current;

	function rollviewercontrols_strafing_binding(value) {
		/*rollviewercontrols_strafing_binding*/ ctx[5].call(null, value);
	}

	let rollviewercontrols_props = {
		openSeadragon: /*openSeadragon*/ ctx[0],
		minZoomLevel,
		maxZoomLevel
	};

	if (/*strafing*/ ctx[1] !== void 0) {
		rollviewercontrols_props.strafing = /*strafing*/ ctx[1];
	}

	rollviewercontrols = new RollViewerControls({ props: rollviewercontrols_props });
	binding_callbacks.push(() => bind(rollviewercontrols, "strafing", rollviewercontrols_strafing_binding));

	return {
		c() {
			create_component(rollviewercontrols.$$.fragment);
		},
		m(target, anchor) {
			mount_component(rollviewercontrols, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const rollviewercontrols_changes = {};
			if (dirty & /*openSeadragon*/ 1) rollviewercontrols_changes.openSeadragon = /*openSeadragon*/ ctx[0];

			if (!updating_strafing && dirty & /*strafing*/ 2) {
				updating_strafing = true;
				rollviewercontrols_changes.strafing = /*strafing*/ ctx[1];
				add_flush_callback(() => updating_strafing = false);
			}

			rollviewercontrols.$set(rollviewercontrols_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rollviewercontrols.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rollviewercontrols.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(rollviewercontrols, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	let if_block = /*showControls*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "id", "roll-viewer");
			attr(div, "class", "svelte-u57qnd");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*showControls*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showControls*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

const WELTE_MIDI_START = 10;
const WELTE_RED_FIRST_NOTE = 24;
const WELTE_RED_LAST_NOTE = 103;
const defaultZoomLevel = 1;
const minZoomLevel = 0.1;
const maxZoomLevel = 4;

function instance($$self, $$props, $$invalidate) {
	let $rollMetadata;
	let $currentTick;
	component_subscribe($$self, rollMetadata, $$value => $$invalidate(11, $rollMetadata = $$value));
	component_subscribe($$self, currentTick, $$value => $$invalidate(13, $currentTick = $$value));
	let { imageUrl } = $$props;
	let { holesByTickInterval } = $$props;
	let openSeadragon;
	let firstHolePx;
	let strafing;
	let marks = [];
	let hoveredMark;
	let showControls;

	const getNoteName = trackerHole => {
		const midiNumber = trackerHole + WELTE_MIDI_START;

		if (midiNumber >= WELTE_RED_FIRST_NOTE && midiNumber <= WELTE_RED_LAST_NOTE) {
			const octave = parseInt(midiNumber / 12, 10) - 1;
			const name = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"][(midiNumber - 21) % 12];
			return `${name}${octave}`;
		}

		return null;
	};

	const createMark = hole => {
		const { WIDTH_COL, ORIGIN_COL, ORIGIN_ROW, OFF_TIME, TRACKER_HOLE } = hole;
		const mark = document.createElement("mark");
		const noteName = getNoteName(TRACKER_HOLE);
		if (noteName) mark.dataset.info = noteName;

		mark.addEventListener("mouseout", () => {
			if (!marks.map(([_hole]) => _hole).includes(hole)) openSeadragon.viewport.viewer.removeOverlay(hoveredMark);
		});

		const viewportRectangle = openSeadragon.viewport.imageToViewportRectangle(ORIGIN_COL, ORIGIN_ROW, WIDTH_COL, OFF_TIME - ORIGIN_ROW);
		openSeadragon.viewport.viewer.addOverlay(mark, viewportRectangle);
		return mark;
	};

	const createHolesOverlaySvg = () => {
		const { IMAGE_WIDTH, IMAGE_LENGTH, holeData } = $rollMetadata;
		if (!holeData) return;
		const imageWidth = parseInt(IMAGE_WIDTH, 10);
		const imageLength = parseInt(IMAGE_LENGTH, 10);
		const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
		const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
		const entireViewportRectangle = openSeadragon.viewport.imageToViewportRectangle(0, 0, imageWidth, imageLength);
		svg.setAttribute("width", imageWidth);
		svg.setAttribute("height", imageLength);
		svg.setAttribute("viewBox", `0 0 ${imageWidth} ${imageLength}`);
		svg.appendChild(g);

		holeData.forEach(hole => {
			const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
			const { ORIGIN_COL, ORIGIN_ROW, WIDTH_COL, OFF_TIME } = hole;
			rect.setAttribute("x", ORIGIN_COL);
			rect.setAttribute("y", ORIGIN_ROW);
			rect.setAttribute("width", WIDTH_COL);
			rect.setAttribute("height", OFF_TIME - ORIGIN_ROW);

			rect.addEventListener("mouseover", () => {
				if (marks.map(([_hole]) => _hole).includes(hole)) return;
				openSeadragon.viewport.viewer.removeOverlay(hoveredMark);
				hoveredMark = createMark(hole);
			});

			g.appendChild(rect);
		});

		openSeadragon.viewport.viewer.addOverlay(svg, entireViewportRectangle);
	};

	const advanceToTick = tick => {
		if (!openSeadragon) return;
		const { viewport } = openSeadragon;

		// if we're panning horizontally we want the target bounds, if otherwise
		//  (and most especially if we happen to be zooming) we want the current bounds
		const viewportBounds = viewport.getBounds(!strafing);

		const linePx = firstHolePx + (scrollDownwards ? tick : -tick);
		const lineViewport = viewport.imageToViewportCoordinates(0, linePx);
		const lineCenter = new OpenSeadragon.Point(viewportBounds.x + viewportBounds.width / 2, lineViewport.y);
		viewport.panTo(lineCenter);
	};

	const highlightHoles = tick => {
		if (!openSeadragon) return;
		const holes = holesByTickInterval.search(tick, tick);

		marks = marks.filter(([hole, elem]) => {
			if (holes.includes(hole)) return true;
			openSeadragon.viewport.viewer.removeOverlay(elem);
			return false;
		});

		holes.forEach(hole => {
			if (marks.map(([_hole]) => _hole).includes(hole)) return;
			const mark = createMark(hole);
			mark.classList.add("active");
			marks.push([hole, mark]);
		});
	};

	onMount(async () => {
		$$invalidate(0, openSeadragon = OpenSeadragon({
			id: "roll-viewer",
			showNavigationControl: false,
			panHorizontal: true,
			visibilityRatio: 1,
			defaultZoomLevel,
			minZoomLevel,
			maxZoomLevel,
			constrainDuringPan: true
		}));

		openSeadragon.addOnceHandler("update-viewport", () => {
			createHolesOverlaySvg();
			advanceToTick(0);
		});

		openSeadragon.addHandler("canvas-drag", () => $$invalidate(1, strafing = true));
		openSeadragon.addHandler("canvas-drag-end", () => $$invalidate(1, strafing = false));
		openSeadragon.open(imageUrl);
	});

	function rollviewercontrols_strafing_binding(value) {
		strafing = value;
		$$invalidate(1, strafing);
	}

	const mouseenter_handler = () => $$invalidate(2, showControls = true);
	const mouseleave_handler = () => $$invalidate(2, showControls = false);

	$$self.$$set = $$props => {
		if ("imageUrl" in $$props) $$invalidate(3, imageUrl = $$props.imageUrl);
		if ("holesByTickInterval" in $$props) $$invalidate(4, holesByTickInterval = $$props.holesByTickInterval);
	};

	let scrollDownwards;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$currentTick*/ 8192) {
			$: advanceToTick($currentTick);
		}

		if ($$self.$$.dirty & /*$currentTick*/ 8192) {
			$: highlightHoles($currentTick);
		}

		if ($$self.$$.dirty & /*$rollMetadata*/ 2048) {
			$: $$invalidate(12, scrollDownwards = $rollMetadata.ROLL_TYPE === "welte-red");
		}

		if ($$self.$$.dirty & /*scrollDownwards, $rollMetadata*/ 6144) {
			$: firstHolePx = scrollDownwards
			? parseInt($rollMetadata.FIRST_HOLE, 10)
			: parseInt($rollMetadata.IMAGE_LENGTH, 10) - parseInt($rollMetadata.FIRST_HOLE, 10);
		}
	};

	return [
		openSeadragon,
		strafing,
		showControls,
		imageUrl,
		holesByTickInterval,
		rollviewercontrols_strafing_binding,
		mouseenter_handler,
		mouseleave_handler
	];
}

class RollViewer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { imageUrl: 3, holesByTickInterval: 4 });
	}
}

export default RollViewer;