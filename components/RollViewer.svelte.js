import './RollViewer.svelte.css.proxy.js';
/* src/components/RollViewer.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import OpenSeadragon from "../_snowpack/pkg/openseadragon.js";
import { rollMetadata, currentTick } from "../stores.js";

function create_fragment(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "id", "roll-viewer");
			attr(div, "class", "svelte-1vutt7g");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $currentTick;
	let $rollMetadata;
	component_subscribe($$self, currentTick, $$value => $$invalidate(5, $currentTick = $$value));
	component_subscribe($$self, rollMetadata, $$value => $$invalidate(6, $rollMetadata = $$value));
	let { imageUrl } = $$props;
	let openSeadragon;
	let firstHolePx;
	let dragging;

	const panViewportToTick = tick => {
		if (!openSeadragon) return;
		const { viewport } = openSeadragon;

		// if we're dragging we want the target bounds, if otherwise (and most
		//   especially if we happen to be zooming) we want the current bounds
		const viewportBounds = viewport.getBounds(!dragging);

		const linePx = firstHolePx + (scrollDownwards ? tick : -tick);
		const lineViewport = viewport.imageToViewportCoordinates(0, linePx);
		const lineCenter = new OpenSeadragon.Point(viewportBounds.x + viewportBounds.width / 2, lineViewport.y);
		viewport.panTo(lineCenter);
	};

	onMount(async () => {
		openSeadragon = OpenSeadragon({
			id: "roll-viewer",
			showNavigationControl: false,
			panHorizontal: true,
			visibilityRatio: 1,
			defaultZoomLevel: 1,
			minZoomLevel: 0.01,
			maxZoomLevel: 4,
			constrainDuringPan: true
		});

		openSeadragon.addOnceHandler("update-viewport", () => panViewportToTick(0));
		openSeadragon.addHandler("canvas-drag", () => dragging = true);
		openSeadragon.addHandler("canvas-drag-end", () => dragging = false);
		openSeadragon.open(imageUrl);
	});

	$$self.$$set = $$props => {
		if ("imageUrl" in $$props) $$invalidate(0, imageUrl = $$props.imageUrl);
	};

	let scrollDownwards;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$currentTick*/ 32) {
			$: panViewportToTick($currentTick);
		}

		if ($$self.$$.dirty & /*$rollMetadata*/ 64) {
			$: $$invalidate(4, scrollDownwards = $rollMetadata.ROLL_TYPE === "welte-red");
		}

		if ($$self.$$.dirty & /*scrollDownwards, $rollMetadata*/ 80) {
			$: firstHolePx = scrollDownwards
			? parseInt($rollMetadata.FIRST_HOLE, 10)
			: parseInt($rollMetadata.IMAGE_LENGTH, 10) - parseInt($rollMetadata.FIRST_HOLE, 10);
		}
	};

	return [imageUrl];
}

class RollViewer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { imageUrl: 0 });
	}
}

export default RollViewer;