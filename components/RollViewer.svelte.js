import './RollViewer.svelte.css.proxy.js';
/* src/components/RollViewer.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import OpenSeadragon from "../_snowpack/pkg/openseadragon.js";
import { rollMetadata, currentTick } from "../stores.js";

function create_fragment(ctx) {
	let div0;
	let t0;
	let div1;
	let button0;
	let t1;
	let button1;
	let t2;
	let button2;
	let t3;
	let button3;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			button0 = element("button");
			button0.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
			t1 = space();
			button1 = element("button");
			button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
			t2 = space();
			button2 = element("button");
			button2.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><line x1="4" y1="6" x2="20" y2="6"></line><line x1="8" y1="12" x2="16" y2="12"></line><line x1="6" y1="18" x2="18" y2="18"></line></svg>`;
			t3 = space();
			button3 = element("button");
			button3.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><polyline points="7 8 3 12 7 16"></polyline><polyline points="17 8 21 12 17 16"></polyline><line x1="3" y1="12" x2="21" y2="12"></line></svg>`;
			attr(div0, "id", "roll-viewer");
			attr(div0, "class", "svelte-h38w6c");
			attr(button0, "class", "svelte-h38w6c");
			attr(button1, "class", "svelte-h38w6c");
			attr(button2, "class", "svelte-h38w6c");
			attr(button3, "class", "svelte-h38w6c");
			attr(div1, "id", "roll-viewer-controls");
			attr(div1, "class", "svelte-h38w6c");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, button0);
			append(div1, t1);
			append(div1, button1);
			append(div1, t2);
			append(div1, button2);
			append(div1, t3);
			append(div1, button3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[4]),
					listen(button1, "click", /*click_handler_1*/ ctx[5]),
					listen(button2, "click", /*centerRoll*/ ctx[1]),
					listen(button3, "click", /*click_handler_2*/ ctx[6])
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

const WELTE_MIDI_START = 10;
const WELTE_RED_FIRST_NOTE = 24;
const WELTE_RED_LAST_NOTE = 103;
const defaultZoomLevel = 1;
const minZoomLevel = 0.1;
const maxZoomLevel = 4;

function instance($$self, $$props, $$invalidate) {
	let $rollMetadata;
	let $currentTick;
	component_subscribe($$self, rollMetadata, $$value => $$invalidate(11, $rollMetadata = $$value));
	component_subscribe($$self, currentTick, $$value => $$invalidate(13, $currentTick = $$value));
	let { imageUrl } = $$props;
	let { holesByTickInterval } = $$props;
	let openSeadragon;
	let firstHolePx;
	let dragging;
	let marks = [];
	let hoveredMark;

	const centerRoll = () => {
		const { viewport } = openSeadragon;
		const viewportBounds = viewport.getBounds();
		const lineCenter = new OpenSeadragon.Point(0.5, viewportBounds.y + viewportBounds.height / 2);
		viewport.panTo(lineCenter);
	};

	const getNoteName = trackerHole => {
		const midiNumber = trackerHole + WELTE_MIDI_START;

		if (midiNumber >= WELTE_RED_FIRST_NOTE && midiNumber <= WELTE_RED_LAST_NOTE) {
			const octave = parseInt(midiNumber / 12, 10) - 1;
			const name = ["A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"][(midiNumber - 21) % 12];
			return `${name}${octave}`;
		}

		return null;
	};

	const createMark = hole => {
		const { WIDTH_COL, ORIGIN_COL, ORIGIN_ROW, OFF_TIME, TRACKER_HOLE } = hole;
		const mark = document.createElement("mark");
		const noteName = getNoteName(TRACKER_HOLE);
		if (noteName) mark.dataset.info = noteName;

		mark.addEventListener("mouseout", () => {
			if (!marks.map(([_hole]) => _hole).includes(hole)) openSeadragon.viewport.viewer.removeOverlay(hoveredMark);
		});

		const viewportRectangle = openSeadragon.viewport.imageToViewportRectangle(ORIGIN_COL, ORIGIN_ROW, WIDTH_COL, OFF_TIME - ORIGIN_ROW);
		openSeadragon.viewport.viewer.addOverlay(mark, viewportRectangle);
		return mark;
	};

	const createHolesOverlaySvg = () => {
		const { IMAGE_WIDTH, IMAGE_LENGTH, holeData } = $rollMetadata;
		if (!holeData) return;
		const imageWidth = parseInt(IMAGE_WIDTH, 10);
		const imageLength = parseInt(IMAGE_LENGTH, 10);
		const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
		const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
		const entireViewportRectangle = openSeadragon.viewport.imageToViewportRectangle(0, 0, imageWidth, imageLength);
		svg.setAttribute("width", imageWidth);
		svg.setAttribute("height", imageLength);
		svg.setAttribute("viewBox", `0 0 ${imageWidth} ${imageLength}`);
		svg.appendChild(g);

		holeData.forEach(hole => {
			const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
			const { ORIGIN_COL, ORIGIN_ROW, WIDTH_COL, OFF_TIME } = hole;
			rect.setAttribute("x", ORIGIN_COL);
			rect.setAttribute("y", ORIGIN_ROW);
			rect.setAttribute("width", WIDTH_COL);
			rect.setAttribute("height", OFF_TIME - ORIGIN_ROW);

			rect.addEventListener("mouseover", () => {
				if (marks.map(([_hole]) => _hole).includes(hole)) return;
				openSeadragon.viewport.viewer.removeOverlay(hoveredMark);
				hoveredMark = createMark(hole);
			});

			g.appendChild(rect);
		});

		openSeadragon.viewport.viewer.addOverlay(svg, entireViewportRectangle);
	};

	const panViewportToTick = tick => {
		if (!openSeadragon) return;
		const { viewport } = openSeadragon;

		// if we're dragging we want the target bounds, if otherwise (and most
		//   especially if we happen to be zooming) we want the current bounds
		const viewportBounds = viewport.getBounds(!dragging);

		const linePx = firstHolePx + (scrollDownwards ? tick : -tick);
		const lineViewport = viewport.imageToViewportCoordinates(0, linePx);
		const lineCenter = new OpenSeadragon.Point(viewportBounds.x + viewportBounds.width / 2, lineViewport.y);
		viewport.panTo(lineCenter);
	};

	const highlightHoles = tick => {
		if (!openSeadragon) return;
		const holes = holesByTickInterval.search(tick, tick);

		marks = marks.filter(([hole, elem]) => {
			if (holes.includes(hole)) return true;
			openSeadragon.viewport.viewer.removeOverlay(elem);
			return false;
		});

		holes.forEach(hole => {
			if (marks.map(([_hole]) => _hole).includes(hole)) return;
			const mark = createMark(hole);
			mark.classList.add("active");
			marks.push([hole, mark]);
		});
	};

	onMount(async () => {
		$$invalidate(0, openSeadragon = OpenSeadragon({
			id: "roll-viewer",
			showNavigationControl: false,
			panHorizontal: true,
			visibilityRatio: 1,
			defaultZoomLevel,
			minZoomLevel,
			maxZoomLevel,
			constrainDuringPan: true
		}));

		openSeadragon.addOnceHandler("update-viewport", () => {
			createHolesOverlaySvg();
			panViewportToTick(0);
		});

		openSeadragon.addHandler("canvas-drag", () => dragging = true);
		openSeadragon.addHandler("canvas-drag-end", () => dragging = false);
		openSeadragon.open(imageUrl);
	});

	const click_handler = () => openSeadragon.viewport.zoomTo(Math.min(openSeadragon.viewport.getZoom() * 1.1, maxZoomLevel));
	const click_handler_1 = () => openSeadragon.viewport.zoomTo(Math.max(openSeadragon.viewport.getZoom() * 0.9, minZoomLevel));

	const click_handler_2 = () => {
		openSeadragon.viewport.zoomTo(1);
		centerRoll();
	};

	$$self.$$set = $$props => {
		if ("imageUrl" in $$props) $$invalidate(2, imageUrl = $$props.imageUrl);
		if ("holesByTickInterval" in $$props) $$invalidate(3, holesByTickInterval = $$props.holesByTickInterval);
	};

	let scrollDownwards;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$currentTick*/ 8192) {
			$: panViewportToTick($currentTick);
		}

		if ($$self.$$.dirty & /*$currentTick*/ 8192) {
			$: highlightHoles($currentTick);
		}

		if ($$self.$$.dirty & /*$rollMetadata*/ 2048) {
			$: $$invalidate(12, scrollDownwards = $rollMetadata.ROLL_TYPE === "welte-red");
		}

		if ($$self.$$.dirty & /*scrollDownwards, $rollMetadata*/ 6144) {
			$: firstHolePx = scrollDownwards
			? parseInt($rollMetadata.FIRST_HOLE, 10)
			: parseInt($rollMetadata.IMAGE_LENGTH, 10) - parseInt($rollMetadata.FIRST_HOLE, 10);
		}
	};

	return [
		openSeadragon,
		centerRoll,
		imageUrl,
		holesByTickInterval,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class RollViewer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { imageUrl: 2, holesByTickInterval: 3 });
	}
}

export default RollViewer;