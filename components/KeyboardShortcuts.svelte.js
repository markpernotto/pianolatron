/* src/components/KeyboardShortcuts.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	init,
	listen,
	noop,
	run_all,
	safe_not_equal
} from "../_snowpack/pkg/svelte/internal.js";

import { get } from "../_snowpack/pkg/svelte/store.js";

import {
	softOnOff,
	sustainOnOff,
	accentOnOff,
	volumeCoefficient,
	tempoCoefficient
} from "../stores.js";

import { clamp, enforcePrecision } from "../utils.js";

function create_fragment(ctx) {
	let mounted;
	let dispose;

	return {
		c: noop,
		m(target, anchor) {
			if (!mounted) {
				dispose = [
					listen(window, "keydown", /*keydown_handler*/ ctx[4]),
					listen(window, "keyup", /*keyup_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self) {
	const keyMap = Object.freeze({
		SOFT: "KeyQ",
		SUSTAIN: "KeyC",
		ACCENT: "Comma",
		VOLUME_UP: "BracketRight",
		VOLUME_DOWN: "BracketLeft",
		TEMPO_UP: "KeyE",
		TEMPO_DOWN: "KeyW"
	});

	const config = {
		volume: {
			store: volumeCoefficient,
			min: 0,
			max: 4,
			delta: 0.1,
			shiftDelta: 0.4,
			ctrlDelta: 0.05,
			precision: 2
		},
		tempo: {
			store: tempoCoefficient,
			min: 0.1,
			max: 4,
			delta: 0.05,
			shiftDelta: 0.1,
			ctrlDelta: 0.01,
			precision: 2
		}
	};

	const updateStore = ({ store, min, max, delta, shiftDelta, ctrlDelta, precision }, { shiftKey, ctrlKey }, increment) => {
		const d = (increment ? 1 : -1) * (shiftKey && shiftDelta || ctrlKey && ctrlDelta || delta);
		store.set(enforcePrecision(clamp(get(store) + d, min, max), precision));
	};

	const increment = (...args) => updateStore(...args, true);
	const decrement = (...args) => updateStore(...args, false);

	const keydown_handler = event => {
		switch (event.code) {
			case keyMap.SOFT:
				if (!event.ctrlKey && !event.shiftKey) event.preventDefault();
				softOnOff.set(true);
				break;
			case keyMap.SUSTAIN:
				if (!event.ctrlKey && !event.shiftKey) event.preventDefault();
				sustainOnOff.set(true);
				break;
			case keyMap.ACCENT:
				if (!event.ctrlKey && !event.shiftKey) event.preventDefault();
				accentOnOff.set(true);
				break;
			case keyMap.VOLUME_UP:
				event.preventDefault();
				increment(config.volume, event);
				break;
			case keyMap.VOLUME_DOWN:
				event.preventDefault();
				decrement(config.volume, event);
				break;
			case keyMap.TEMPO_UP:
				event.preventDefault();
				increment(config.tempo, event);
				break;
			case keyMap.TEMPO_DOWN:
				event.preventDefault();
				decrement(config.tempo, event);
				break;
		} // no default
	};

	const keyup_handler = ({ code }) => {
		switch (code) {
			case keyMap.SOFT:
				softOnOff.set(false);
				break;
			case keyMap.SUSTAIN:
				sustainOnOff.set(false);
				break;
			case keyMap.ACCENT:
				accentOnOff.set(false);
				break;
		} // no default
	};

	return [keyMap, config, increment, decrement, keydown_handler, keyup_handler];
}

class KeyboardShortcuts extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default KeyboardShortcuts;