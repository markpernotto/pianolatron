import './SettingsPanel.svelte.css.proxy.js';
/* src/components/SettingsPanel.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	component_subscribe,
	create_bidirectional_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	null_to_empty,
	safe_not_equal,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

import { fly } from "../_snowpack/pkg/svelte/transition.js";
import { userSettings } from "../stores.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (54:4) {#each themes as theme}
function create_each_block(ctx) {
	let button;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[3](/*theme*/ ctx[6], ...args);
	}

	return {
		c() {
			button = element("button");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*theme*/ ctx[6]) + " svelte-r56iil"));
			toggle_class(button, "active", /*$userSettings*/ ctx[1].theme === /*theme*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userSettings, themes*/ 6) {
				toggle_class(button, "active", /*$userSettings*/ ctx[1].theme === /*theme*/ ctx[6]);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let t1;
	let div1;
	let t2;
	let input;
	let div2_transition;
	let current;
	let mounted;
	let dispose;
	let each_value = /*themes*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text("Theme:\n    ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div1 = element("div");
			t2 = text("Show details for Active Notes:\n    ");
			input = element("input");
			attr(div0, "class", "svelte-r56iil");
			attr(input, "type", "checkbox");
			attr(div1, "class", "svelte-r56iil");
			attr(div2, "id", "settings-panel");
			attr(div2, "class", "svelte-r56iil");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div2, t1);
			append(div2, div1);
			append(div1, t2);
			append(div1, input);
			input.checked = /*$userSettings*/ ctx[1].activeNoteDetails;
			/*div2_binding*/ ctx[5](div2);
			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*themes, $userSettings, userSettings*/ 6) {
				each_value = /*themes*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*$userSettings*/ 2) {
				input.checked = /*$userSettings*/ ctx[1].activeNoteDetails;
			}
		},
		i(local) {
			if (current) return;

			if (local) {
				add_render_callback(() => {
					if (!div2_transition) div2_transition = create_bidirectional_transition(
						div2,
						fly,
						{
							delay: 0,
							duration: 300,
							x: parseInt(window.getComputedStyle(/*el*/ ctx[0]).width, 10),
							y: 0,
							opacity: 1
						},
						true
					);

					div2_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			if (local) {
				if (!div2_transition) div2_transition = create_bidirectional_transition(
					div2,
					fly,
					{
						delay: 0,
						duration: 300,
						x: parseInt(window.getComputedStyle(/*el*/ ctx[0]).width, 10),
						y: 0,
						opacity: 1
					},
					false
				);

				div2_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			/*div2_binding*/ ctx[5](null);
			if (detaching && div2_transition) div2_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $userSettings;
	component_subscribe($$self, userSettings, $$value => $$invalidate(1, $userSettings = $$value));
	let el;
	const themes = ["cardinal", "blue", "green", "grey"];
	const click_handler = theme => userSettings.update(settings => ({ ...settings, theme }));

	function input_change_handler() {
		$userSettings.activeNoteDetails = this.checked;
		userSettings.set($userSettings);
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$userSettings*/ 2) {
			$: document.body.className = $userSettings.theme;
		}
	};

	return [el, $userSettings, themes, click_handler, input_change_handler, div2_binding];
}

class SettingsPanel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default SettingsPanel;