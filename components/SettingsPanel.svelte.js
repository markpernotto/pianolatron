import './SettingsPanel.svelte.css.proxy.js';
/* src/components/SettingsPanel.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	create_bidirectional_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	null_to_empty,
	safe_not_equal,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

import { fly } from "../_snowpack/pkg/svelte/transition.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (50:4) {#each colors as color}
function create_each_block(ctx) {
	let button;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[3](/*color*/ ctx[5], ...args);
	}

	return {
		c() {
			button = element("button");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*color*/ ctx[5]) + " svelte-war1os"));
			toggle_class(button, "active", /*currentColor*/ ctx[1] === /*color*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*currentColor, colors*/ 6) {
				toggle_class(button, "active", /*currentColor*/ ctx[1] === /*color*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t;
	let div1_transition;
	let current;
	let each_value = /*colors*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t = text("Theme:\n    ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div1, "id", "settings-panel");
			attr(div1, "class", "svelte-war1os");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			/*div1_binding*/ ctx[4](div1);
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*colors, currentColor, document*/ 6) {
				each_value = /*colors*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			if (local) {
				add_render_callback(() => {
					if (!div1_transition) div1_transition = create_bidirectional_transition(
						div1,
						fly,
						{
							delay: 0,
							duration: 300,
							x: parseInt(window.getComputedStyle(/*el*/ ctx[0]).width, 10),
							y: 0,
							opacity: 1
						},
						true
					);

					div1_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			if (local) {
				if (!div1_transition) div1_transition = create_bidirectional_transition(
					div1,
					fly,
					{
						delay: 0,
						duration: 300,
						x: parseInt(window.getComputedStyle(/*el*/ ctx[0]).width, 10),
						y: 0,
						opacity: 1
					},
					false
				);

				div1_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			/*div1_binding*/ ctx[4](null);
			if (detaching && div1_transition) div1_transition.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let el;
	let currentColor = document.body.className || "cardinal";
	const colors = ["cardinal", "blue", "green", "grey"];

	const click_handler = color => {
		$$invalidate(1, currentColor = color);
		document.body.className = color;
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			el = $$value;
			$$invalidate(0, el);
		});
	}

	return [el, currentColor, colors, click_handler, div1_binding];
}

class SettingsPanel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default SettingsPanel;