import './PlaybackSettings.svelte.css.proxy.js';
/* src/components/PlaybackSettings.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { volume, tempoControl, playbackProgress } from "../stores.js";
import RangeSlider from "../ui-components/RangeSlider.svelte.js";

function create_fragment(ctx) {
	let div5;
	let div0;
	let span0;
	let t1;
	let span1;
	let t2_value = /*$volume*/ ctx[1].master + "";
	let t2;
	let t3;
	let rangeslider0;
	let updating_value;
	let t4;
	let div1;
	let span2;
	let t6;
	let span3;
	let t7_value = /*$volume*/ ctx[1].left + "";
	let t7;
	let t8;
	let rangeslider1;
	let updating_value_1;
	let t9;
	let div2;
	let span4;
	let t11;
	let span5;
	let t12_value = /*$volume*/ ctx[1].right + "";
	let t12;
	let t13;
	let rangeslider2;
	let updating_value_2;
	let t14;
	let div3;
	let span6;
	let t16;
	let span7;
	let t17;
	let t18;
	let rangeslider3;
	let updating_value_3;
	let t19;
	let div4;
	let span8;
	let t21;
	let span9;
	let t22_value = (/*$playbackProgress*/ ctx[3] * 100).toFixed(2) + "";
	let t22;
	let t23;
	let t24;
	let rangeslider4;
	let current;

	function rangeslider0_value_binding(value) {
		/*rangeslider0_value_binding*/ ctx[4].call(null, value);
	}

	let rangeslider0_props = {
		min: "0",
		max: "4",
		step: ".1",
		name: "volume"
	};

	if (/*$volume*/ ctx[1].master !== void 0) {
		rangeslider0_props.value = /*$volume*/ ctx[1].master;
	}

	rangeslider0 = new RangeSlider({ props: rangeslider0_props });
	binding_callbacks.push(() => bind(rangeslider0, "value", rangeslider0_value_binding));

	function rangeslider1_value_binding(value) {
		/*rangeslider1_value_binding*/ ctx[5].call(null, value);
	}

	let rangeslider1_props = {
		min: "0",
		max: "4",
		step: ".1",
		name: "volume"
	};

	if (/*$volume*/ ctx[1].left !== void 0) {
		rangeslider1_props.value = /*$volume*/ ctx[1].left;
	}

	rangeslider1 = new RangeSlider({ props: rangeslider1_props });
	binding_callbacks.push(() => bind(rangeslider1, "value", rangeslider1_value_binding));

	function rangeslider2_value_binding(value) {
		/*rangeslider2_value_binding*/ ctx[6].call(null, value);
	}

	let rangeslider2_props = {
		min: "0",
		max: "4",
		step: ".1",
		name: "volume"
	};

	if (/*$volume*/ ctx[1].right !== void 0) {
		rangeslider2_props.value = /*$volume*/ ctx[1].right;
	}

	rangeslider2 = new RangeSlider({ props: rangeslider2_props });
	binding_callbacks.push(() => bind(rangeslider2, "value", rangeslider2_value_binding));

	function rangeslider3_value_binding(value) {
		/*rangeslider3_value_binding*/ ctx[7].call(null, value);
	}

	let rangeslider3_props = {
		min: "1",
		max: "180",
		step: "1",
		name: "tempo"
	};

	if (/*$tempoControl*/ ctx[2] !== void 0) {
		rangeslider3_props.value = /*$tempoControl*/ ctx[2];
	}

	rangeslider3 = new RangeSlider({ props: rangeslider3_props });
	binding_callbacks.push(() => bind(rangeslider3, "value", rangeslider3_value_binding));

	rangeslider4 = new RangeSlider({
			props: {
				min: "0",
				max: "1",
				step: "0.001",
				value: /*$playbackProgress*/ ctx[3],
				name: "progress",
				mousewheel: false
			}
		});

	rangeslider4.$on("input", /*input_handler*/ ctx[8]);

	return {
		c() {
			div5 = element("div");
			div0 = element("div");
			span0 = element("span");
			span0.textContent = "Volume:";
			t1 = space();
			span1 = element("span");
			t2 = text(t2_value);
			t3 = space();
			create_component(rangeslider0.$$.fragment);
			t4 = space();
			div1 = element("div");
			span2 = element("span");
			span2.textContent = "Bass Volume:";
			t6 = space();
			span3 = element("span");
			t7 = text(t7_value);
			t8 = space();
			create_component(rangeslider1.$$.fragment);
			t9 = space();
			div2 = element("div");
			span4 = element("span");
			span4.textContent = "Treble Volume:";
			t11 = space();
			span5 = element("span");
			t12 = text(t12_value);
			t13 = space();
			create_component(rangeslider2.$$.fragment);
			t14 = space();
			div3 = element("div");
			span6 = element("span");
			span6.textContent = "Tempo:";
			t16 = space();
			span7 = element("span");
			t17 = text(/*$tempoControl*/ ctx[2]);
			t18 = space();
			create_component(rangeslider3.$$.fragment);
			t19 = space();
			div4 = element("div");
			span8 = element("span");
			span8.textContent = "Progress:";
			t21 = space();
			span9 = element("span");
			t22 = text(t22_value);
			t23 = text("%");
			t24 = space();
			create_component(rangeslider4.$$.fragment);
			attr(div0, "class", "control svelte-1cq4iz3");
			attr(div1, "class", "control svelte-1cq4iz3");
			attr(div2, "class", "control svelte-1cq4iz3");
			attr(div3, "class", "control svelte-1cq4iz3");
			attr(div4, "class", "control svelte-1cq4iz3");
			attr(div5, "id", "playback-settings");
			attr(div5, "class", "svelte-1cq4iz3");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div0);
			append(div0, span0);
			append(div0, t1);
			append(div0, span1);
			append(span1, t2);
			append(div0, t3);
			mount_component(rangeslider0, div0, null);
			append(div5, t4);
			append(div5, div1);
			append(div1, span2);
			append(div1, t6);
			append(div1, span3);
			append(span3, t7);
			append(div1, t8);
			mount_component(rangeslider1, div1, null);
			append(div5, t9);
			append(div5, div2);
			append(div2, span4);
			append(div2, t11);
			append(div2, span5);
			append(span5, t12);
			append(div2, t13);
			mount_component(rangeslider2, div2, null);
			append(div5, t14);
			append(div5, div3);
			append(div3, span6);
			append(div3, t16);
			append(div3, span7);
			append(span7, t17);
			append(div3, t18);
			mount_component(rangeslider3, div3, null);
			append(div5, t19);
			append(div5, div4);
			append(div4, span8);
			append(div4, t21);
			append(div4, span9);
			append(span9, t22);
			append(span9, t23);
			append(div4, t24);
			mount_component(rangeslider4, div4, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$volume*/ 2) && t2_value !== (t2_value = /*$volume*/ ctx[1].master + "")) set_data(t2, t2_value);
			const rangeslider0_changes = {};

			if (!updating_value && dirty & /*$volume*/ 2) {
				updating_value = true;
				rangeslider0_changes.value = /*$volume*/ ctx[1].master;
				add_flush_callback(() => updating_value = false);
			}

			rangeslider0.$set(rangeslider0_changes);
			if ((!current || dirty & /*$volume*/ 2) && t7_value !== (t7_value = /*$volume*/ ctx[1].left + "")) set_data(t7, t7_value);
			const rangeslider1_changes = {};

			if (!updating_value_1 && dirty & /*$volume*/ 2) {
				updating_value_1 = true;
				rangeslider1_changes.value = /*$volume*/ ctx[1].left;
				add_flush_callback(() => updating_value_1 = false);
			}

			rangeslider1.$set(rangeslider1_changes);
			if ((!current || dirty & /*$volume*/ 2) && t12_value !== (t12_value = /*$volume*/ ctx[1].right + "")) set_data(t12, t12_value);
			const rangeslider2_changes = {};

			if (!updating_value_2 && dirty & /*$volume*/ 2) {
				updating_value_2 = true;
				rangeslider2_changes.value = /*$volume*/ ctx[1].right;
				add_flush_callback(() => updating_value_2 = false);
			}

			rangeslider2.$set(rangeslider2_changes);
			if (!current || dirty & /*$tempoControl*/ 4) set_data(t17, /*$tempoControl*/ ctx[2]);
			const rangeslider3_changes = {};

			if (!updating_value_3 && dirty & /*$tempoControl*/ 4) {
				updating_value_3 = true;
				rangeslider3_changes.value = /*$tempoControl*/ ctx[2];
				add_flush_callback(() => updating_value_3 = false);
			}

			rangeslider3.$set(rangeslider3_changes);
			if ((!current || dirty & /*$playbackProgress*/ 8) && t22_value !== (t22_value = (/*$playbackProgress*/ ctx[3] * 100).toFixed(2) + "")) set_data(t22, t22_value);
			const rangeslider4_changes = {};
			if (dirty & /*$playbackProgress*/ 8) rangeslider4_changes.value = /*$playbackProgress*/ ctx[3];
			rangeslider4.$set(rangeslider4_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangeslider0.$$.fragment, local);
			transition_in(rangeslider1.$$.fragment, local);
			transition_in(rangeslider2.$$.fragment, local);
			transition_in(rangeslider3.$$.fragment, local);
			transition_in(rangeslider4.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangeslider0.$$.fragment, local);
			transition_out(rangeslider1.$$.fragment, local);
			transition_out(rangeslider2.$$.fragment, local);
			transition_out(rangeslider3.$$.fragment, local);
			transition_out(rangeslider4.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_component(rangeslider0);
			destroy_component(rangeslider1);
			destroy_component(rangeslider2);
			destroy_component(rangeslider3);
			destroy_component(rangeslider4);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $volume;
	let $tempoControl;
	let $playbackProgress;
	component_subscribe($$self, volume, $$value => $$invalidate(1, $volume = $$value));
	component_subscribe($$self, tempoControl, $$value => $$invalidate(2, $tempoControl = $$value));
	component_subscribe($$self, playbackProgress, $$value => $$invalidate(3, $playbackProgress = $$value));
	let { skipToPercentage } = $$props;

	function rangeslider0_value_binding(value) {
		$volume.master = value;
		volume.set($volume);
	}

	function rangeslider1_value_binding(value) {
		$volume.left = value;
		volume.set($volume);
	}

	function rangeslider2_value_binding(value) {
		$volume.right = value;
		volume.set($volume);
	}

	function rangeslider3_value_binding(value) {
		$tempoControl = value;
		tempoControl.set($tempoControl);
	}

	const input_handler = ({ target: { value } }) => skipToPercentage(value);

	$$self.$$set = $$props => {
		if ("skipToPercentage" in $$props) $$invalidate(0, skipToPercentage = $$props.skipToPercentage);
	};

	return [
		skipToPercentage,
		$volume,
		$tempoControl,
		$playbackProgress,
		rangeslider0_value_binding,
		rangeslider1_value_binding,
		rangeslider2_value_binding,
		rangeslider3_value_binding,
		input_handler
	];
}

class PlaybackSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { skipToPercentage: 0 });
	}
}

export default PlaybackSettings;