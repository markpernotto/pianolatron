import './PanelSwitcher.svelte.css.proxy.js';
/* src/components/PanelSwitcher.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	svg_element
} from "../_snowpack/pkg/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (67:37) 
function create_if_block_1(ctx) {
	let svg;
	let path;
	let circle;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			circle = svg_element("circle");
			attr(path, "d", "M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z");
			attr(circle, "cx", "12");
			attr(circle, "cy", "12");
			attr(circle, "r", "3");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "1.5");
			attr(svg, "stroke", "currentColor");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
			append(svg, circle);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (45:6) {#if panel === 'controls'}
function create_if_block(ctx) {
	let svg;
	let circle0;
	let line0;
	let line1;
	let circle1;
	let line2;
	let line3;
	let circle2;
	let line4;
	let line5;

	return {
		c() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			line0 = svg_element("line");
			line1 = svg_element("line");
			circle1 = svg_element("circle");
			line2 = svg_element("line");
			line3 = svg_element("line");
			circle2 = svg_element("circle");
			line4 = svg_element("line");
			line5 = svg_element("line");
			attr(circle0, "cx", "14");
			attr(circle0, "cy", "6");
			attr(circle0, "r", "2");
			attr(line0, "x1", "4");
			attr(line0, "y1", "6");
			attr(line0, "x2", "12");
			attr(line0, "y2", "6");
			attr(line1, "x1", "16");
			attr(line1, "y1", "6");
			attr(line1, "x2", "20");
			attr(line1, "y2", "6");
			attr(circle1, "cx", "8");
			attr(circle1, "cy", "12");
			attr(circle1, "r", "2");
			attr(line2, "x1", "4");
			attr(line2, "y1", "12");
			attr(line2, "x2", "6");
			attr(line2, "y2", "12");
			attr(line3, "x1", "10");
			attr(line3, "y1", "12");
			attr(line3, "x2", "20");
			attr(line3, "y2", "12");
			attr(circle2, "cx", "17");
			attr(circle2, "cy", "18");
			attr(circle2, "r", "2");
			attr(line4, "x1", "4");
			attr(line4, "y1", "18");
			attr(line4, "x2", "15");
			attr(line4, "y2", "18");
			attr(line5, "x1", "19");
			attr(line5, "y1", "18");
			attr(line5, "x2", "20");
			attr(line5, "y2", "18");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "1.5");
			attr(svg, "stroke", "currentColor");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle0);
			append(svg, line0);
			append(svg, line1);
			append(svg, circle1);
			append(svg, line2);
			append(svg, line3);
			append(svg, circle2);
			append(svg, line4);
			append(svg, line5);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (36:2) {#each panels as panel}
function create_each_block(ctx) {
	let input;
	let input_value_value;
	let input_id_value;
	let t0;
	let label;
	let t1;
	let label_for_value;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*panel*/ ctx[4] === "controls") return create_if_block;
		if (/*panel*/ ctx[4] === "settings") return create_if_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			input = element("input");
			t0 = space();
			label = element("label");
			if (if_block) if_block.c();
			t1 = space();
			attr(input, "type", "radio");
			attr(input, "name", "panel-switcher");
			input.__value = input_value_value = /*panel*/ ctx[4];
			input.value = input.__value;
			attr(input, "id", input_id_value = /*panel*/ ctx[4]);
			attr(input, "class", "svelte-14r7ie4");
			/*$$binding_groups*/ ctx[3][0].push(input);
			attr(label, "for", label_for_value = /*panel*/ ctx[4]);
			attr(label, "class", "svelte-14r7ie4");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			input.checked = input.__value === /*selectedPanel*/ ctx[0];
			insert(target, t0, anchor);
			insert(target, label, anchor);
			if (if_block) if_block.m(label, null);
			append(label, t1);

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*selectedPanel*/ 1) {
				input.checked = input.__value === /*selectedPanel*/ ctx[0];
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			/*$$binding_groups*/ ctx[3][0].splice(/*$$binding_groups*/ ctx[3][0].indexOf(input), 1);
			if (detaching) detach(t0);
			if (detaching) detach(label);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_value = /*panels*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "svelte-14r7ie4");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*panels, selectedPanel*/ 3) {
				each_value = /*panels*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const panels = ["controls", "settings"];
	let { selectedPanel } = $$props;
	const $$binding_groups = [[]];

	function input_change_handler() {
		selectedPanel = this.__value;
		$$invalidate(0, selectedPanel);
	}

	$$self.$$set = $$props => {
		if ("selectedPanel" in $$props) $$invalidate(0, selectedPanel = $$props.selectedPanel);
	};

	return [selectedPanel, panels, input_change_handler, $$binding_groups];
}

class PanelSwitcher extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { selectedPanel: 0 });
	}
}

export default PanelSwitcher;