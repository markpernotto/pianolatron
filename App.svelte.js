/* src/App.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "./_snowpack/pkg/svelte/internal.js";

import {
	midiSamplePlayer,
	pianoReady,
	playPauseMidiFile,
	stopMidiFile
} from "./components/SamplePlayer.js";

import RollDetails from "./components/RollDetails.svelte.js";
import PlaybackControls from "./components/PlaybackControls.svelte.js";

function create_if_block(ctx) {
	let rolldetails;
	let t;
	let playbackcontrols;
	let current;
	rolldetails = new RollDetails({});

	playbackcontrols = new PlaybackControls({
			props: { playPauseMidiFile, stopMidiFile }
		});

	return {
		c() {
			create_component(rolldetails.$$.fragment);
			t = space();
			create_component(playbackcontrols.$$.fragment);
		},
		m(target, anchor) {
			mount_component(rolldetails, target, anchor);
			insert(target, t, anchor);
			mount_component(playbackcontrols, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(rolldetails.$$.fragment, local);
			transition_in(playbackcontrols.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rolldetails.$$.fragment, local);
			transition_out(playbackcontrols.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(rolldetails, detaching);
			if (detaching) detach(t);
			destroy_component(playbackcontrols, detaching);
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let if_block_anchor;
	let current;
	let if_block = /*appReady*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			h1 = element("h1");
			h1.textContent = `${title}`;
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*appReady*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*appReady*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const title = "Pianolatron Development";

function instance($$self, $$props, $$invalidate) {
	let appReady = false;

	// Use the url to fetch the file asynchronously
	const mididataReady = fetch("./assets/mididata.json").then(mididataResponse => mididataResponse.json()).then(mididataJson => midiSamplePlayer.loadDataUri(mididataJson.mozart_rondo_alla_turca));

	Promise.all([mididataReady, pianoReady]).then(() => {
		$$invalidate(0, appReady = true);
	});

	return [appReady];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;